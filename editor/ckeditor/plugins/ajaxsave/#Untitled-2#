
<div id="tempPlayerLinks">
	<div id="clip1">
		<p class='load'>LOAD AUDIO 1</p>
		<div id="playlistWrapper">
			<ul class="playlist hidden">
				<li class="last">
					<a id='mpl' href="../../recordings/201112250915.mp3">09:15</a>
					<span class="offset">start: 00:07</span>
					<div class="metadata">
						<div class="duration">4:43</div> <!-- total track time (for positioning while loading, until determined -->
						<ul>
							<li><p>Electric razor</p><span>0:00</span></li> <!-- first scene -->
							<li><p>Water, scissors</p><span>2:41</span></li> <!-- start time of second scene -->
							<li><p>More razor work</p><span>4:00</span></li>
						</ul>
					</div>
				</li>
			</ul>
		</div>
	</div>
	<div id="clip2">
  	<p class='load'>LOAD AUDIO 2</p>
		<div class="playlistWrapper">
    	<ul class="playlist hidden">
      	<li class="last">
					<a id='someId' href="../../recordings/201112250915.mp3">09:30</a>
					<span class="offset">00:07</span>
					<div class="metadata">
						<div class="duration">3:20</div> <!-- total track time (for positioning while loading, until determined -->
						<ul>
							<li><p>Start</p><span>0:30</span></li> <!-- first scene -->
							<li><p>Needle</p><span>0:45</span></li> <!-- start time of second scene -->
							<li><p>Haystack</p><span>2:00</span></li>
						</ul>
					</div>
				</li>
			</ul>
		</div>
	</div>
</div>


let $startAsDec := if ($start) then xs:decimal(normalize-space($start)) else ()
let $stopAsDec := if ($stop) then xs:decimal(normalize-space($stop)) else $startAsDec

(: This script processes data sent after a clip edit -- the system can assume that the meeting and the clip id does already exist, otherwise the user would not have been able to edit the clip text
=> not true...
:)
(: status update will be passed as a part of the text body :)



(: update the correct document... :)
(: simply replace all text nodes with id between or equal to start and stop :) 

let $setuser := xdb:login("/db", "admin", "paris305")

(:
let $style := <!DOCTYPE stylesheet [
<!ENTITY ntilde  "&#241;" ><!-- small n, tilde -->
]><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:output method="xml"/><xsl:variable name="number" select="wrapper/@n"/><xsl:template match="/"> <wrapper>     <xsl:apply-templates select="wrapper/*"/>   </wrapper> </xsl:template> <xsl:template match="*">   <xsl:copy><xsl:attribute name="c">        <xsl:value-of select="$number"/>      </xsl:attribute>   <xsl:copy-of select="text()"/>  </xsl:copy> </xsl:template></xsl:stylesheet>
:)
      				
				
(: select the correct document :)

(: let $doc := if ($category="orig") then "/text.xml" else "/translations.xml" :)

let $doc := "/text.xml"
let $text-doc := concat("/db/tullio/", $meeting, $doc)

let $op := util:random()
let $clumsy := <e marker='invalid' id='{$op}'/>
let $atts := $clumsy/@* 

let $touch := doc($text-doc)//p[@c <= $stopAsDec and @c >=$startAsDec]

(: clean edit adds the clip number to each paragraph :)
let $nice := transform:transform($nodes, "../xsl/cleanEdit.xsl", ())

let $update := if ($nice) then (update insert $atts into $touch, update insert $nice//p preceding $touch[1], update delete doc($text-doc)//p[@id=$op][@marker='invalid']) else ("something went wrong")


(: return a success message :)

return 
<html>
<head></head>

<body>{$update, $nice//p, $startAsDec, $stopAsDec, $touch}</body>

</html>
 







console.log("doc " + asString + "\ncat: " + cat + "\nstart: " + clipid + "\nstop: " + stop  + "\nmeeting: " + mmm  + "\nid: " + author);
	
	$.ajax({
			url: "/exist/tullio/xq/storeClipEdit.xql",
			type: "POST",
			data: {
				"doc": asString,
				"cat": cat,
				"start": clipid,
				"stop": stop,
				"meeting": mmm,
				"id": author
			},
			async: false
	});
	console.log('after request');
	
	
	$(jq(rowId) + " table.events-table").replaceWith($("#hidden table.events-table"));
	// $('div.second').replaceWith('<h2>New heading</h2>');
	$(jq(rowId) + " table.events-table").addClass('edited');
	
	$(jq(rowId) + " events").replaceWith($("#hidden events"));
	
	var newContent = $("#hidden div#text").html();
	editor.setData(newContent);
					
	$("#cke").attr('id', '');

	setTimeout( function() { edited=''; editor.destroy() }, 200);					
	noUpdate = false;
	
	


















/*
	console.log('enter finish ' + rowId);
	
	console.log(asString);
	// replace existing content and event list
	
	// store the new event list in the database
	//$("#newEvents")
	console.log('old table');
	console.log($(jq(rowId) + " table.events-table"));
	console.log('new table');
	console.log($("#hidden  table.events-table").html());
	
	// one script will save text and data and unlock the clip
	*/
	/*
	var request = $.ajax({
  url: "/exist/tullio/xq/storeClipEdit.xql",
  type: "POST",
  data: {
							"v": $(this).hasClass("orig") ? "orig" : "trans",
							"n": editReqId,
							"id": author,
							"m": mmm
					},
  async: false
});
	
	*/













	// try to submit the whole lot
	
	var doctype2 = "<?xml version='1.0'?><!DOCTYPE wrapper [<!ENTITY nbsp '&#160;'>]>";
	var editedcontent = doctype2 + "<wrapper n='" + clipid + "'>" + editor.getData().replace(/[&][#]160[;]/gi," ") + "</wrapper>";
	var contentDoc = $.parseXML(editedcontent);
	console.log('editor content');
	console.log(contentDoc);

					// store the text				
					$.ajax({
							url: "../xq/storeClipEdit.xql",
							type: "POST",
							data: {
								"text": editedcontent,
								"cat": cat,
								"start": clipid,
								"stop": stop,
								"meeting": mmm
							},
							async: false
					});
					
					
					var newEvents = "<wrapper>" + $(jq(rowId) + " events").html() + "</wrapper>";
					console.log(newEvents);
					// store the new event list
					$.ajax({
							url: "../xq/updateEvents.xql",
							type: "POST",
							data: {
								"events": newEvents,
								"start": clipid,
								"stop": stop,
								"m": mmm
							},
							async: false
					});

					
					$.ajax({
							url: "../xq/unlock.xql",
							type: "POST",
							data: {
								"v": cat,
								"n": clipid,
								"id": author,
								"m": mmm
							},
							async: false
					});
					
					
					/*
									
													$.post("../xq/storeClipEdit.xql", {
							"text": editedcontent,
							"cat": cat,
							"start": clipid,
							"stop": stop,
							"meeting": mmm
					}, function(data) {
							// alert("Data Loaded: " + data);
					});
					$.post("../xq/unlock.xql", {
							"v": cat,
							"n": clipid,
							"id": author,
							"m": mmm
					}, function(data) {
							// alert("Data Loaded: " + data);
					});
					*/
